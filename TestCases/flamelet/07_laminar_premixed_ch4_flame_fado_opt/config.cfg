%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: flow through a heat exchanger, CHT setup                   %
% Author: Nijso Beishuizen, Ole Burghardt                                      %
% Institution: Bosch Thermotechniek BV, Technical University of Kaiserslautern %
% Date: 24/11/2020                                                             %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%
%   Mesh stuff   %
%%%%%%%%%%%%%%%%%%

MESH_FILENAME= mesh.su2
MESH_OUT_FILENAME= mesh_deformed.su2

MESH_FORMAT= SU2
%MULTIZONE_MESH= YES


% Restart flow input file
%__DIRECT__SOLUTION_FILENAME= solution.dat

% Restart adjoint input file
%__ADJOINT__SOLUTION_FILENAME= solution.dat



%__OBJ_NOX__OBJECTIVE_FUNCTION= CUSTOM_OBJFUNC
%__OBJ_CO__OBJECTIVE_FUNCTION= CUSTOM_OBJFUNC
%__OBJ_TEMP__OBJECTIVE_FUNCTION= SURFACE_STATIC_TEMPERATURE

%__OBJ_NOX__CUSTOM_OUTPUTS= 'avg_NOx : MassFlowAvg{SPECIES[3]}[outlet]'
%__OBJ_NOX__CUSTOM_OBJFUNC= avg_NOx

%__OBJ_CO__CUSTOM_OUTPUTS= 'avg_CO : MassFlowAvg{SPECIES[2]}[outlet]'
%__OBJ_CO__CUSTOM_OBJFUNC= avg_CO

OBJECTIVE_WEIGHT= 1.0



CUSTOM_OUTPUTS= 'avg_CO : MassFlowAvg{SPECIES[2]}[outlet];\
                 avg_NOx : MassFlowAvg{SPECIES[3]}[outlet];\
                 avg_Temp : MassFlowAvg{TEMPERATURE}[outlet]'

% CUSTOM_OBJFUNC= '1e3 * (FORCE_Z + fabs(SURFACE_MASSFLOW[1])) + dev_vel'

% CUSTOM_OBJFUNC= '5.1452e-4 / 100 * 100 * avg_CO\
%                 +0.02329   / 100 * 100 * avg_NOx\
%                 +1.501e-10 / 100 * 100 * avg_Temp'

CUSTOM_OBJFUNC= ' __WEIGHT_CO__ * (5.1452e-4 / 100) * avg_CO\
                + __WEIGHT_NOX__ * (0.02329   / 100) * avg_NOx\
                + __WEIGHT_TEMP__ * (1.501e-10 / 100) * avg_Temp'

OBJECTIVE_FUNCTION= CUSTOM_OBJFUNC

%
% User defined expressions of solver variables and other history outputs.
% The syntax to define a custom output is 'name : type{expression}[markers]'.
% NOTE: To obtain the list of available solver variables write an invalid
% expression (e.g. 'x : AreaAvg{INVALID}[]') and run SU2.
% Different outputs need to be separated by ";". The available types are:
% - Macro: Introduces a new field that can only be used in other expressions,
%   it is not an output by itself (note the "$" symbol to reference macros).
% - Function: Introduces a new scalar output that is a function of other scalar
%   outputs, it cannot reference fields (e.g. velocity).
% - AreaAvg and AreaInt: Computes an area average or integral of a field (the
%   expression) over the list of markers.
% - MassFlowAvg and MassFlowInt: Computes a mass flow average or integral.
% - Probe: Evaluates the expression using the values of the mesh point closest
%   to the coordinates specified inside "[]", [x, y] or [x, y, z] (2 or 3D).
% NOTE: Each custom output can only use one type, e.g. it is not possible to
% write 'p_drop : AreaAvg{PRESSURE}[inlet] - AreaAvg{PRESSURE}[outlet]'. This
% would need to be separated into two AreaAvg outputs and one Function to
% compute their difference.
% CUSTOM_OUTPUTS= 'velocity : Macro{sqrt(pow(VELOCITY_X, 2) + pow(VELOCITY_Y, 2) + pow(VELOCITY_Z, 2))};\
%                  avg_vel : AreaAvg{$velocity}[z_minus, z_plus];\
%                  var_vel : AreaAvg{pow($velocity - avg_vel, 2)}[z_minus, z_plus];\
%                  dev_vel : Function{sqrt(var_vel) / avg_vel};\
%                  probe1 : Probe{$velocity}[0.005, 0.005, 0.05]'
%
% "COMBO" is the name and group of the output for the objective function
% (regardless of definition). "CUSTOM" is the group for all custom outputs.
% SCREEN_OUTPUT= INNER_ITER, RMS_DENSITY, RMS_ENERGY, LINSOL_RESIDUAL, FORCE_Z,\
%                SURFACE_MASSFLOW, SURFACE_TOTAL_TEMPERATURE, avg_vel, dev_vel, probe1, COMBO
% HISTORY_OUTPUT = ITER, AERO_COEFF, FLOW_COEFF, FLOW_COEFF_SURF, CUSTOM, COMBO
% Here we define how the custom objective is computed from other outputs. For 
% example, force in the z direction (computed for all MARKER_MONITORING and part
% of AERO_COEFF) plus the absolute value of massflow across the second surface
% ([1]) in MARKER_ANALYZE, scaled by a factor of 1000. It is also possible to
% use "per surface" values from MARKER_MONITORING (use the dry-run mode to see
% the names of available outputs, e.g. SU2_CFD -d lam_flatplate.cfg).
% For multizone problems the CUSTOM_OBJFUNC should be defined for each zone
% individually (with the outputs of that zone), the total for the problem is
% the sum over zones, see disc_adj_fsi/Airfoil_2d.
% CUSTOM_OBJFUNC= '1e3 * (FORCE_Z + fabs(SURFACE_MASSFLOW[1])) + dev_vel'








RESTART_SOL= NO

RESTART_FILENAME= solution.dat
RESTART_ADJ_FILENAME= solution_adj.dat

TIME_DOMAIN = NO
ITER = 20000
%ITER = 5


OUTPUT_WRT_FREQ= 1000
SCREEN_WRT_FREQ_INNER = 1
SCREEN_WRT_FREQ_OUTER = 1

WRT_VOLUME_OVERWRITE= YES

WRT_ZONE_CONV= YES

VOLUME_FILENAME= asym_probe

GRAD_OBJFUNC_FILENAME= of_grad.csv

CONDUCTIVITY_MODEL= FLAMELET
DIFFUSIVITY_MODEL= FLAMELET
KIND_SCALAR_MODEL= FLAMELET


% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%

SOLVER = INC_NAVIER_STOKES
KIND_TURB_MODEL= NONE

MARKER_ANALYZE = (outlet)
MARKER_ANALYZE_AVERAGE = MASSFLUX

%__AVG_MDOT__MARKER_ANALYZE_AVERAGE = MASSFLUX
%__AVG_UNITY__

MARKER_MONITORING= ( outlet )

MARKER_PLOTTING= ( NONE )

WRT_ZONE_HIST= YES

%__DIRECT__SCREEN_OUTPUT= INNER_ITER WALL_TIME RMS_PRESSURE RMS_VELOCITY-X RMS_VELOCITY-Y RMS_TKE RMS_DISSIPATION  LINSOL_ITER LINSOL_RESIDUAL  
%__ADJOINT__SCREEN_OUTPUT= INNER_ITER WALL_TIME RMS_ADJ_PRESSURE RMS_ADJ_VELOCITY-X RMS_ADJ_VELOCITY-Y RMS_ADJ_TKE RMS_ADJ_DISSIPATION

% HISTORY_OUTPUT = WALL_TIME RMS_RES AERO_COEFF FLOW_COEFF FLOW_COEFF_SURF FLAMELET_COEFF_SURF CUSTOM COMBO
HISTORY_OUTPUT= RMS_RES FLAMELET_COEFF_SURF FLOW_COEFF_SURF CUSTOM COMBO WALL_TIME LINSOL 

VOLUME_OUTPUT = SOLUTION PRIMITIVE SOURCE RESIDUAL SENSITIVITY LOOKUP

%OUTPUT_FILES= (RESTART, RESTART_ASCII, PARAVIEW, SURFACE_PARAVIEW, PARAVIEW_ASCII)
OUTPUT_FILES= (RESTART, PARAVIEW_ASCII)


% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%

%__NOT_DEF__MARKER_SYM= ( symmetry_ym, symmetry_yp-Match )
%__DEF__MARKER_SYM= ( outlet, symmetry_ym, symmetry_yp-Match )

%MARKER_ISOTHERMAL= (wall_burner-Wall, 450,  wall_probe_fluid-Wall, 450)

%Validation setting:
MARKER_ISOTHERMAL= (wall_burner_sides-Wall, 450,   wall_burner_tip-Wall, 450,   wall_probe_fluid-Wall, 600)



%SPECIFIED_INLET_PROFILE= NO
%INLET_FILENAME = inlet_bc.dat
INLET_MATCHING_TOLERANCE= 1e-5

INC_INLET_TYPE= VELOCITY_INLET
% Inlet boundary marker(s)

%MARKER_INLET = (inlet, 300.0, 0.3, 1.0, 0.0, 0.0)

%Validation setting:
MARKER_INLET = (inlet, 300.0, 0.2, 1.0, 0.0, 0.0)

MARKER_INLET_SPECIES = (inlet, 0, 0, 0, 0)

%__NOT_DEF__INC_OUTLET_TYPE= PRESSURE_OUTLET
%__NOT_DEF__MARKER_OUTLET= ( outlet, 0.0 )

% ---------------- INCOMPRESSIBLE FLOW CONDITION DEFINITION -------------------%
%
% Density model within the incompressible flow solver.
% Options are CONSTANT (default), BOUSSINESQ, or VARIABLE. If VARIABLE,
% an appropriate fluid model must be selected.

INC_DENSITY_MODEL= VARIABLE

% Solve the energy equation in the incompressible flow solver
INC_ENERGY_EQUATION = YES


% Initial density for incompressible flows
% (1.2886 kg/m^3 by default (air), 998.2 Kg/m^3 (water))
INC_DENSITY_INIT= 1.16

% Initial velocity for incompressible flows (1.0,0,0 m/s by default)
INC_VELOCITY_INIT= (0.2, 0.0, 0.0 )


% Initial temperature for incompressible flows that include the 
% energy equation (288.15 K by default). Value is ignored if 
% INC_ENERGY_EQUATION is false.
INC_TEMPERATURE_INIT= 300.0

% Non-dimensionalization scheme for incompressible flows. Options are
% INITIAL_VALUES (default), REFERENCE_VALUES, or DIMENSIONAL.
% INC_*_REF values are ignored unless REFERENCE_VALUES is chosen.
INC_NONDIM= DIMENSIONAL

% -------------------- FLUID MODEL --------------------------------------- %

FLUID_MODEL= FLUID_FLAMELET

FILENAMES_INTERPOLATOR = fgm.drg

%FLAME_OFFSET = 0.004 0.0 0.0
%FLAME_NORMAL = 1.0 0.0 0.0
%FLAME_THICKNESS = 0.2e-3
%FLAME_BURNT_THICKNESS = 1

FLAME_INIT = 0.004 0.0 0.0   1.0 0.0 0.0   0.2e-3   1

% -------------------- SPECIES TRANSPORT ---------------------------------------%


CONTROLLING_VARIABLE_NAMES= (ProgressVariable, EnthalpyTot)
CONTROLLING_VARIABLE_SOURCE_NAMES = (ProdRateTot_PV, NULL)

USER_SCALAR_NAMES = (Y-CO_split, Y-NOx_total)
USER_SOURCE_NAMES = ( \
    ProdRatePos_Y-CO,  ProdRateNegScaled_Y-CO  ,\
    ProdRateTot_Y-NOx, zero
)


SPECIES_INIT = (0, -193880, 0, 0)

CONV_NUM_METHOD_SPECIES= BOUNDED_SCALAR

MARKER_SPECIES_STRONG_BC = (inlet, wall_burner_sides-Wall, wall_burner_tip-Wall, wall_probe_fluid-Wall)

MUSCL_SPECIES= YES

SLOPE_LIMITER_SPECIES = NONE

TIME_DISCRE_SPECIES= EULER_IMPLICIT

% SPECIES CLIPPING

SPECIES_CLIPPING= YES

SPECIES_CLIPPING_MIN= 0, -3554460 0 0

SPECIES_CLIPPING_MAX= 0.3 3017660 1 1

LOOKUP_NAMES = (MolarWeightMix, Conductivity, HeatRelease, Diffusivity, \
    ProdRatePos_Y-CO,  ProdRateNegScaled_Y-CO  ,\
    ProdRatePos_Y-NOx, ProdRateNegScaled_Y-NOx ,\
    ProdRateTot_Y-NOx)

% --------------------------- VISCOSITY MODEL ---------------------------------%

% Viscosity model (SUTHERLAND, CONSTANT_VISCOSITY).
VISCOSITY_MODEL= FLAMELET

% Molecular Viscosity that would be constant (1.716E-5 by default)
% cold value
MU_CONSTANT= 1.79E-5

% cold value
DIFFUSIVITY_CONSTANT= 0.0264

% Sutherland Viscosity Ref (1.716E-5 default value for AIR SI)
MU_REF= 1.716E-5

% Sutherland Temperature Ref (273.15 K default value for AIR SI)
MU_T_REF= 273.15

% Sutherland constant (110.4 default value for AIR SI)
SUTHERLAND_CONSTANT= 110.4

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%

%NUM_METHOD_GRAD= GREEN_GAUSS
NUM_METHOD_GRAD= WEIGHTED_LEAST_SQUARES

%__DIRECT__CFL_NUMBER= 80
%__ADJOINT__CFL_NUMBER= 80

%CFL_REDUCTION_SPECIES= 1
%RELAXATION_FACTOR_FLOW=1
%RELAXATION_FACTOR_SPECIES=1

CFL_ADAPT = NO

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%

% Linear solver for implicit formulations (BCGSTAB, FGMRES)
LINEAR_SOLVER= BCGSTAB

% Preconditioner of the Krylov linear solver (JACOBI, LINELET, LU_SGS)
LINEAR_SOLVER_PREC= ILU

% Minimum error of the linear solver for implicit formulations
LINEAR_SOLVER_ERROR= 1E-10

% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 20

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%

% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW)
CONV_NUM_METHOD_FLOW= FDS

% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES

% Slope limiter (VENKATAKRISHNAN, MINMOD)
SLOPE_LIMITER_FLOW = NONE

% Coefficient for the limiter (smooth regions)
VENKAT_LIMITER_COEFF= 10.0

% 2nd and 4th order artificial dissipation coefficients
JST_SENSOR_COEFF= ( 0.5, 0.02 )

% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% --------------------------- CONVERGENCE PARAMETERS --------------------------%

CONV_RESIDUAL_MINVAL= -32

% --------------------------- Optimization Parameters --------------------------%

% INVERSE_VOLUME, WALL_DISTANCE, CONSTANT_STIFFNESS
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE
DEFORM_COEFF = 0.0

%DV_KIND= FFD_SETTING
%DV_PARAM= (BOX_CENTER, 3, 0, 0.0, 1.0 )
%DV_VALUE=  0

DV_KIND= \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
\
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
\
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
\
\
\
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
\
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
\
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D, \
FFD_CONTROL_POINT_2D

DV_MARKER= ( wall_probe_fluid-Wall )
%DV_MARKER= ( wall_probe-Wall )


% FFD order:
%%
%%  4   3
%%       
%%  1   2

%snug box
FFD_DEFINITION= (BOX_CENTER, 0.0099, 0.0014, 0.0,   0.0201, 0.0014, 0.0,   0.0201, 0.0026, 0.0,   0.0099, 0.0026, 0.0,   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

%FFD_BOUNDS = (0, -0.0005, 0,   1, 0.0024, 0)
FFD_DEGREE= ( 5, 2, 0)
FFD_CONTINUITY= USER_INPUT
FFD_FIX_I= (100)
FFD_FIX_J= (100)
FFD_ITERATIONS= 1000
FFD_TOLERANCE= 1E-10


DV_PARAM= \
( BOX_CENTER, 0, 0, 1.0, 0.0 ); \
( BOX_CENTER, 1, 0, 1.0, 0.0 ); \
( BOX_CENTER, 2, 0, 1.0, 0.0 ); \
( BOX_CENTER, 3, 0, 1.0, 0.0 ); \
( BOX_CENTER, 4, 0, 1.0, 0.0 ); \
( BOX_CENTER, 5, 0, 1.0, 0.0 ); \
( BOX_CENTER, 6, 0, 1.0, 0.0 ); \
( BOX_CENTER, 7, 0, 1.0, 0.0 ); \
( BOX_CENTER, 8, 0, 1.0, 0.0 ); \
( BOX_CENTER, 9, 0, 1.0, 0.0 ); \
( BOX_CENTER, 10, 0, 1.0, 0.0 ); \
( BOX_CENTER, 11, 0, 1.0, 0.0 ); \
( BOX_CENTER, 12, 0, 1.0, 0.0 ); \
( BOX_CENTER, 13, 0, 1.0, 0.0 ); \
( BOX_CENTER, 14, 0, 1.0, 0.0 ); \
( BOX_CENTER, 15, 0, 1.0, 0.0 ); \
( BOX_CENTER, 16, 0, 1.0, 0.0 ); \
( BOX_CENTER, 17, 0, 1.0, 0.0 ); \
\
( BOX_CENTER, 0, 1, 1.0, 0.0 ); \
( BOX_CENTER, 1, 1, 1.0, 0.0 ); \
( BOX_CENTER, 2, 1, 1.0, 0.0 ); \
( BOX_CENTER, 3, 1, 1.0, 0.0 ); \
( BOX_CENTER, 4, 1, 1.0, 0.0 ); \
( BOX_CENTER, 5, 1, 1.0, 0.0 ); \
( BOX_CENTER, 6, 1, 1.0, 0.0 ); \
( BOX_CENTER, 7, 1, 1.0, 0.0 ); \
( BOX_CENTER, 8, 1, 1.0, 0.0 ); \
( BOX_CENTER, 9, 1, 1.0, 0.0 ); \
( BOX_CENTER, 10, 1, 1.0, 0.0 ); \
( BOX_CENTER, 11, 1, 1.0, 0.0 ); \
( BOX_CENTER, 12, 1, 1.0, 0.0 ); \
( BOX_CENTER, 13, 1, 1.0, 0.0 ); \
( BOX_CENTER, 14, 1, 1.0, 0.0 ); \
( BOX_CENTER, 15, 1, 1.0, 0.0 ); \
( BOX_CENTER, 16, 1, 1.0, 0.0 ); \
( BOX_CENTER, 17, 1, 1.0, 0.0 ); \
\
( BOX_CENTER, 0, 2, 1.0, 0.0 ); \
( BOX_CENTER, 1, 2, 1.0, 0.0 ); \
( BOX_CENTER, 2, 2, 1.0, 0.0 ); \
( BOX_CENTER, 3, 2, 1.0, 0.0 ); \
( BOX_CENTER, 4, 2, 1.0, 0.0 ); \
( BOX_CENTER, 5, 2, 1.0, 0.0 ); \
( BOX_CENTER, 6, 2, 1.0, 0.0 ); \
( BOX_CENTER, 7, 2, 1.0, 0.0 ); \
( BOX_CENTER, 8, 2, 1.0, 0.0 ); \
( BOX_CENTER, 9, 2, 1.0, 0.0 ); \
( BOX_CENTER, 10, 2, 1.0, 0.0 ); \
( BOX_CENTER, 11, 2, 1.0, 0.0 ); \
( BOX_CENTER, 12, 2, 1.0, 0.0 ); \
( BOX_CENTER, 13, 2, 1.0, 0.0 ); \
( BOX_CENTER, 14, 2, 1.0, 0.0 ); \
( BOX_CENTER, 15, 2, 1.0, 0.0 ); \
( BOX_CENTER, 16, 2, 1.0, 0.0 ); \
( BOX_CENTER, 17, 2, 1.0, 0.0 ); \
\
\
\
( BOX_CENTER, 0, 0, 0.0, 1.0 ); \
( BOX_CENTER, 1, 0, 0.0, 1.0 ); \
( BOX_CENTER, 2, 0, 0.0, 1.0 ); \
( BOX_CENTER, 3, 0, 0.0, 1.0 ); \
( BOX_CENTER, 4, 0, 0.0, 1.0 ); \
( BOX_CENTER, 5, 0, 0.0, 1.0 ); \
( BOX_CENTER, 6, 0, 0.0, 1.0 ); \
( BOX_CENTER, 7, 0, 0.0, 1.0 ); \
( BOX_CENTER, 8, 0, 0.0, 1.0 ); \
( BOX_CENTER, 9, 0, 0.0, 1.0 ); \
( BOX_CENTER, 10, 0, 0.0, 1.0 ); \
( BOX_CENTER, 11, 0, 0.0, 1.0 ); \
( BOX_CENTER, 12, 0, 0.0, 1.0 ); \
( BOX_CENTER, 13, 0, 0.0, 1.0 ); \
( BOX_CENTER, 14, 0, 0.0, 1.0 ); \
( BOX_CENTER, 15, 0, 0.0, 1.0 ); \
( BOX_CENTER, 16, 0, 0.0, 1.0 ); \
( BOX_CENTER, 17, 0, 0.0, 1.0 ); \
\
( BOX_CENTER, 0, 1, 0.0, 1.0 ); \
( BOX_CENTER, 1, 1, 0.0, 1.0 ); \
( BOX_CENTER, 2, 1, 0.0, 1.0 ); \
( BOX_CENTER, 3, 1, 0.0, 1.0 ); \
( BOX_CENTER, 4, 1, 0.0, 1.0 ); \
( BOX_CENTER, 5, 1, 0.0, 1.0 ); \
( BOX_CENTER, 6, 1, 0.0, 1.0 ); \
( BOX_CENTER, 7, 1, 0.0, 1.0 ); \
( BOX_CENTER, 8, 1, 0.0, 1.0 ); \
( BOX_CENTER, 9, 1, 0.0, 1.0 ); \
( BOX_CENTER, 10, 1, 0.0, 1.0 ); \
( BOX_CENTER, 11, 1, 0.0, 1.0 ); \
( BOX_CENTER, 12, 1, 0.0, 1.0 ); \
( BOX_CENTER, 13, 1, 0.0, 1.0 ); \
( BOX_CENTER, 14, 1, 0.0, 1.0 ); \
( BOX_CENTER, 15, 1, 0.0, 1.0 ); \
( BOX_CENTER, 16, 1, 0.0, 1.0 ); \
( BOX_CENTER, 17, 1, 0.0, 1.0 ); \
\
( BOX_CENTER, 0, 2, 0.0, 1.0 ); \
( BOX_CENTER, 1, 2, 0.0, 1.0 ); \
( BOX_CENTER, 2, 2, 0.0, 1.0 ); \
( BOX_CENTER, 3, 2, 0.0, 1.0 ); \
( BOX_CENTER, 4, 2, 0.0, 1.0 ); \
( BOX_CENTER, 5, 2, 0.0, 1.0 ); \
( BOX_CENTER, 6, 2, 0.0, 1.0 ); \
( BOX_CENTER, 7, 2, 0.0, 1.0 ); \
( BOX_CENTER, 8, 2, 0.0, 1.0 ); \
( BOX_CENTER, 9, 2, 0.0, 1.0 ); \
( BOX_CENTER, 10, 2, 0.0, 1.0 ); \
( BOX_CENTER, 11, 2, 0.0, 1.0 ); \
( BOX_CENTER, 12, 2, 0.0, 1.0 ); \
( BOX_CENTER, 13, 2, 0.0, 1.0 ); \
( BOX_CENTER, 14, 2, 0.0, 1.0 ); \
( BOX_CENTER, 15, 2, 0.0, 1.0 ); \
( BOX_CENTER, 16, 2, 0.0, 1.0 ); \
( BOX_CENTER, 17, 2, 0.0, 1.0 )

DV_VALUE= __FFD_PTS__

