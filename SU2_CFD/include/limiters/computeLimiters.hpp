/*!
 * \file computeLimiters.hpp
 * \brief Declaration of compute limiters function, the
 *        implementation is in computeLimiters.cpp.
 * \author P. Gomes
 * \version 7.0.0 "Blackbird"
 *
 * SU2 Project Website: https://su2code.github.io
 *
 * The SU2 Project is maintained by the SU2 Foundation
 * (http://su2foundation.org)
 *
 * Copyright 2012-2019, SU2 Contributors (cf. AUTHORS.md)
 *
 * SU2 is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * SU2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with SU2. If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once


/*!
 * \brief A wrapper funtion that calls specialized implementations depending
 *        on "LimiterKind". Those implementations are generated by instantiating
 *        versions of "computeLimiters_impl" with appropriate specializations
 *        of "CLimiterDetails". See corresponding hpp files for further details.
 */
template<class FieldType, class GradientType>
void computeLimiters(ENUM_LIMITER LimiterKind,
                     CSolver* solver,
                     MPI_QUANTITIES kindMpiComm,
                     PERIODIC_QUANTITIES kindPeriodicComm1,
                     PERIODIC_QUANTITIES kindPeriodicComm2,
                     CGeometry& geometry,
                     CConfig& config,
                     size_t varBegin,
                     size_t varEnd,
                     const FieldType& field,
                     const GradientType& gradient,
                     FieldType& fieldMin,
                     FieldType& fieldMax,
                     FieldType& limiter);
